#include <iostream>
#include <time.h>
#include <bits/stdc++.h>

using namespace std;

vector <vector<pair<int,bool>>> pole;
vector <vector<int>> path;

void floyd(){
    for (int i = 0; i < pole.size(); ++i) {
        for (int j = 0; j < pole.size(); ++j) {
            for (int k = 0; k < pole.size(); ++k) {
                if (pole[j][i].first + pole[i][k].first < pole[j][k].first){
                    pole[j][k].first = pole[j][i].first + pole[i][k].first;
                }
            }
        }
    }
}

int main() {
    ios_base::sync_with_stdio(false);

    clock_t start = clock();
    cin.tie(NULL);

/* ---------------------------------------------------------- */


    int n,m;
    cin >> n >> m;

    pole.resize(n);
    path.resize(n);
    for (int i = 0; i < n; ++i) {
        pole[i].resize(n);
        path[i].resize(n);
    }
    /*
    for (int j = 0; j < n; ++j) {
        for (int i = 0; i < n; ++i) {
            if (j == i){
                pole[j][i].first = 0;
                path[j][i] = 0;
            } else{
                int ri = rand() % 100 + 1;
                pole[j][i].first = ri;
                path[j][i] = ri;
            }
        }
    }
    */
    pole[0][0].first = {0};
    pole[0][1].first = {1};
    pole[0][2].first = {100000};
    pole[0][3].first = {100000};

    pole[1][0].first = {100000};
    pole[1][1].first = {0};
    pole[1][2].first = {2};
    pole[1][3].first = {100000};

    pole[2][0].first = {2};
    pole[2][1].first = {5};
    pole[2][2].first = {0};
    pole[2][3].first = {100000};

    pole[3][0].first = {100000};
    pole[3][1].first = {10};
    pole[3][2].first = {2};
    pole[3][3].first = {0};


    for (int k = 0; k < n; ++k) {
        for (int i = 0; i < n; ++i) {
            cout << pole[k][i].first << " ";
        }cout << endl;
    }

    floyd();

    cout << endl;

    for (int k = 0; k < n; ++k) {
        for (int i = 0; i < n; ++i) {
            cout << pole[k][i].first << " ";
        }cout << endl;
    }

    return 0;

}